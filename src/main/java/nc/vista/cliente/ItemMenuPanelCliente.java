/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package nc.vista.cliente;

import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableRowSorter;
import nc.controller.ClientController;
import nc.controller.ItemMenuController;
import nc.dao.ItemPedidoDAO;
import nc.dao.jdbc.ItemPedidoJDBC;
import nc.excepciones.ItemNoEncontradoException;
import nc.excepciones.PedidoCerradoException;
import nc.excepciones.PedidoIncorrectoException;
import nc.excepciones.VendedorIncorrectoException;
import nc.modelo.Carrito;
import nc.vista.PersonalizatedTableModel;
import nc.vista.vendedor.dialog.ItemMenuVer;

/**
 *
 * @author nicol
 */
public class ItemMenuPanelCliente extends javax.swing.JPanel {

    private enum filterMode {
        ID,
        NAME,
        PRICE,
        VENDEDOR,
        NONE
    }
    private PersonalizatedTableModel modeloItemMenu;
    private ItemMenuController itemsMenu;
    ClientController clientes;
    private TableRowSorter<PersonalizatedTableModel> sorter;
    private filterMode actualFilter;
    private int vendedorID = -1;
    private int ID_Seleccionado = -1;
    private ClientesFrame frameSuperior;
    boolean hayCarrito = false;
    int cliente;
    ItemPedidoDAO ipm = new ItemPedidoJDBC();
    Carrito carrito;

    /**
     * Creates new form ItemMenuPanel
     */
    public ItemMenuPanelCliente() {
        itemsMenu = new ItemMenuController();
        List<String> modeloTableName = Arrays.asList("ID", "Item", "Precio");
        modeloItemMenu = new PersonalizatedTableModel(modeloTableName, itemsMenu.loadData());
        sorter = new TableRowSorter<>(modeloItemMenu);
        actualFilter = filterMode.ID;
        initComponents();
        contentTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        contentTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evt) {
                if (!evt.getValueIsAdjusting()) {
                    int filaSeleccionada = contentTable.getSelectedRow();
                    if (filaSeleccionada != -1) {
                        ID_Seleccionado = (Integer) contentTable.getValueAt(filaSeleccionada, 0);
                    }
                }
            }
        });
    }

    public void setClientController(ClientController clientes) {
        this.clientes = clientes;
    }

    public void setCliente(int id) {
        cliente = id;
    }

    public void setUpperFrame(ClientesFrame frame) {
        this.frameSuperior = frame;
    }

    public void setID(int ID) {
        this.vendedorID = ID;
        this.itemsMenu.setID(ID);
    }

    public void updateModel() {
        this.modeloItemMenu.setItems(itemsMenu.loadData());
        contentTable.updateUI();
    }

    public void agregar(int cantidad, int idItemMenu) throws VendedorIncorrectoException, PedidoIncorrectoException, PedidoCerradoException, ItemNoEncontradoException {
        if (!hayCarrito) {
            //ItemPedidoMemory ipm = ItemPedidoMemory.getItemPedidoMemory();
            carrito = new Carrito(clientes.getObjetCliente(cliente), itemsMenu.getObjetItemMenu(idItemMenu), cantidad);
            hayCarrito = true;
        } else {
            carrito.agregarItem(itemsMenu.getObjetItemMenu(idItemMenu), cantidad);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButton1 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        contentTable = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        VerDetalleButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        backButton1 = new javax.swing.JButton();
        agregarACarrito = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jPanel7.setLayout(new java.awt.GridBagLayout());

        contentTable.setAutoCreateRowSorter(true);
        contentTable.setModel(this.modeloItemMenu);
        contentTable.setRowSorter(sorter);
        jScrollPane10.setViewportView(contentTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel7.add(jScrollPane10, gridBagConstraints);

        jTextPane3.setEditable(false);
        jTextPane3.setText("Lista de ItemMenu");
        jTextPane3.setToolTipText("");
        jTextPane3.setAutoscrolls(false);
        jTextPane3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane3.setFocusable(false);
        jScrollPane13.setViewportView(jTextPane3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel7.add(jScrollPane13, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanel7.add(jSeparator1, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(this.modeloItemMenu.getColumnName()));
        jComboBox1.setMinimumSize(new java.awt.Dimension(135, 22));
        jComboBox1.setPreferredSize(new java.awt.Dimension(135, 22));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jComboBox1, gridBagConstraints);

        jTextPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextPane1.setToolTipText("");
        jTextPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTextPane1.setPreferredSize(new java.awt.Dimension(180, 20));
        jTextPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextPane1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanel7.add(jPanel1, gridBagConstraints);

        VerDetalleButton.setText("Ver Detalle");
        VerDetalleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerDetalleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel7.add(VerDetalleButton, gridBagConstraints);

        backButton.setText("Seleccionar otro vendedor");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel7.add(backButton, gridBagConstraints);

        backButton1.setText("Volver");
        backButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel7.add(backButton1, gridBagConstraints);

        agregarACarrito.setText("Agregar a Carrito");
        agregarACarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarACarritoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel7.add(agregarACarrito, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 831, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 912, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextPane1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPane1KeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            String text;
            text = jTextPane1.getText();
            sorter.setRowFilter(null);
            jTextPane1.setText("");
            if (!text.isBlank()) {
                try {
                    switch (actualFilter) {
                        case ID ->
                            sorter.setRowFilter(RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, Integer.valueOf(text), 0));
                        case NAME ->
                            sorter.setRowFilter(RowFilter.regexFilter(text, 1));
                        case PRICE ->
                            sorter.setRowFilter(RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, Double.valueOf(text), 3));
                        case VENDEDOR ->
                            sorter.setRowFilter(RowFilter.regexFilter(text, 2));
                    }
                } catch (NumberFormatException e) {
                }
            }

        }
    }//GEN-LAST:event_jTextPane1KeyPressed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        String currentSelection = (String) jComboBox1.getSelectedItem();
        switch (currentSelection) {
            case "Tipo de Búsqueda":
                this.actualFilter = filterMode.NONE;
                break;
            case "ID":
                this.actualFilter = filterMode.ID;
                break;
            case "Item":
                this.actualFilter = filterMode.NAME;
                break;
            case "Vendedor":
                this.actualFilter = filterMode.VENDEDOR;
                break;
            case "Precio":
                this.actualFilter = filterMode.PRICE;
                break;
            default:
                break;
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        int opcion = JOptionPane.showConfirmDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Si elije otro vendedor su carrito será borrado, desea continuar?",
                "Borrar Carrito", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
        if (opcion == JOptionPane.OK_OPTION) {
            this.frameSuperior.deleteCarrito();
        }
    }//GEN-LAST:event_backButtonActionPerformed

    private void VerDetalleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerDetalleButtonActionPerformed
        if (this.ID_Seleccionado != -1) {
            ItemMenuVer dialog;
            try {
                dialog = new ItemMenuVer((JFrame) SwingUtilities.getWindowAncestor(this), true, this.ID_Seleccionado, this.itemsMenu);
                dialog.setModal(true);
                dialog.setVisible(true);
            } catch (ItemNoEncontradoException ex) {
                Logger.getLogger(ItemMenuPanelCliente.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error, Item no seleccionado. Por favor seleccione un Item",
                    "Item no seleccionado", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_VerDetalleButtonActionPerformed

    private void backButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton1ActionPerformed
        this.frameSuperior.goBack();
    }//GEN-LAST:event_backButton1ActionPerformed

    private void agregarACarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarACarritoActionPerformed
        if (this.ID_Seleccionado != -1) {
            try {
                AgregarCarrito carritoDialog = new AgregarCarrito((JFrame) SwingUtilities.getWindowAncestor(this), true, this.ID_Seleccionado, this.itemsMenu, this);
                carritoDialog.setModal(true);
                carritoDialog.setVisible(true);
                carritoDialog.setLocationRelativeTo(null);
                carritoDialog.setSize(500, 500);
            } catch (ItemNoEncontradoException ex) {
                Logger.getLogger(ItemMenuPanelCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error, Item no seleccionado. Por favor seleccione un Item",
                    "Item no seleccionado", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_agregarACarritoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton VerDetalleButton;
    private javax.swing.JButton agregarACarrito;
    private javax.swing.JButton backButton;
    private javax.swing.JButton backButton1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTable contentTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane3;
    // End of variables declaration//GEN-END:variables
}
